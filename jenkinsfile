pipeline {
    agent any

    environment {
        Scanner_Home = tool('sonarScanner')  // Ensure 'sonarScanner' is correctly configured in Jenkins
    }

    stages {
        // Vulnerability check stage using Dependency Check plugin
        stage('Vulnerability Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableNodeAudit', 
                                odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        // SonarQube code quality analysis stage
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarServer') {  // Ensure 'sonarServer' is configured in Jenkins
                    sh '''
                        $Scanner_Home/bin/sonar-scanner \
                        -Dsonar.projectKey=VirtualBrowser \
                        -Dsonar.projectName=VirtualBrowser \
                        -Dsonar.sources=.
                    '''
                }
            }
        }

        // Docker build and push stage
        stage('Docker Stage') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker_user', toolName: 'Docker') {
                        // Docker build and push commands here
                        sh 'docker build -t my-image:latest .'
                        sh 'docker push my-image:latest'
                    }
                }
            }
        }
    }
}
